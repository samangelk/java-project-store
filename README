Java project - T-Shirt Store
For this project you will build a T-Shirt Storefront. The T-Shirt Storefront will have a Command Line Interface (CLI). A shopper will be able to list available t-shirts, view and search t-shirts, add t-shirts to their cart, see their cart, and check out. Unfortunately you won't be collecting and making any money in this project. Transactions will be simulated.

Here’s a reference for how to read the above diagram: (see diagram/end_state_class_diagram)

Each box represents a class that you will create, update, or use. The diagram represents the end state of the code you will implement over a series of 9 steps. The diagram shows that there will be 5 classes and one enum:

ShopRunner
Menu
Shop
Cart
Product
MenuOption enum
You'll see other classes referenced in the diagram, like Scanner and ArrayList. They exist in the Java library for you to use.

Here are the relationships you’ll eventually have between your classes:

Menu has a Cart
Menu has a Shop
Menu has a Scanner
Shop has an ArrayList of Products
Cart has an ArrayList of Products
****************************************************************************
Step 1 / Modules 1-4

Basic requirements
For Step 1, you will implement some initial functionality for the T-Shirt store. You will need knowledge from Modules 1-4 of the prerequisites curriculum to do so. The first thing you’ll build will be the store’s greeting and main menu.

When the application first starts, the store should greet and prompt the shopper for their name as follows:

Hello. Please enter your name:

After the shopper types in their name, for example ATA Shopper, they should be greeted with the following:

Welcome ATA Shopper to T-Shirt Mart

After that, the main shop menu should be displayed, and look like this:

--Main Menu--
Select an option using one of the numbers shown

0: Exit
1: List Products
2: Buy Product
3: Find Product
4: Show Cart
5: Checkout
From here, the shopper should be able to select any of the 6 options displayed to them. For this first step, you will not build any of the functionality associated with options numbered 1-5, and instead will just print text to confirm their selection.

For example, if the shopper picks option 1: List Products, the following would be printed to the console:

Option 1 was selected. Not yet implemented.

After any of the options 1 - 5 are selected, and the text has been printed to confirm the shopper's selection, the application should terminate. Note that this doesn't mean it should print anything extra to the terminal. It just means the application should close.

You do need to let the shopper know that the application is exiting though, if the shopper selects option 0. When the shopper selects 0: Exit, they should see the following message and then the application should close:

Exiting now. Goodbye.

Here’s what a full set of interactions should look like for this step from the perspective of the shopper when the shopper enters 0 to exit:

Hello. Please enter your name:
ATA Shopper
Welcome ATA Shopper to T-Shirt Mart

--Main Menu--
Select an option using one of the numbers shown

0: Exit
1: List Products
2: Buy Product
3: Find Product
4: Show Cart
5: Checkout
0
Exiting now. Goodbye.
When any other choice is selected, here's what the shopper should see instead, in this case entering 1 for the menu selection:

Hello. Please enter your name:
ATA Shopper
Welcome ATA Shopper to T-Shirt Mart

--Main Menu--
Select an option using one of the numbers shown

0: Exit
1: List Products
2: Buy Product
3: Find Product
4: Show Cart
5: Checkout
1
Option 1 was selected. Not yet implemented.
****************************************************************************
Step 7 / Modules 7-9
Basic requirements
For Step 7, you will implement some more functionality for the T-Shirt store. You will need knowledge from Modules 7-9 of the prerequisites curriculum to do so.

Take a look below at the end state UML diagram for this step: (see diagram/step_7_class_diagram)

What’s a shop without a shopping cart? In this step you will implement a Cart class and make it work with the rest of the application. When a shopper selects option 2 from the menu, items in the shop should be added to the Cart.

When the shopper selects option 2, they should be prompted with the ID of the item they want to purchase.

The prompt should be:

Please enter the ID of the product you would like to purchase:
If the shopper enters a valid product ID and presses enter, that product should be added to the cart’s ArrayList of items.

If the shopper enters a valid ID when adding the item to the cart, the item should be added to the ArrayList of items in the Cart and the total in the cart should be updated. The shopper should see the following message printed, confirming the item has been added to the cart, in this case for a V-Neck:

V-Neck has been added to your cart.
If they enter an invalid ID the following message should be printed and neither the items nor the total should be updated:

That item ID is invalid and could not be added to the cart.
The internal cart total should be updated based on the calculated sum total of the prices of the items in the cart. Because items is a private member of the Cart class, you need to implement a public addItem method to update the items.

The Cart class also needs to have a private member containing the tax rate. Keep in mind that you’ll need to calculate the total in the cart with the tax rate applied.

In addition, you’ll need to create a public method called showDetails.It should be called when the shopper selects option 4 in the menu and should print the total pre-tax cost of all the items in the cart and the cart items themselves. It should also display the after tax cost on a separate line. Here is what the printout should look like, when it contains just a V-Neck:

--Cart--
Item Count: 1
Items: 
V-Neck: $20.00

Pre-Tax Total: $20.00
Post-Tax Total (10.00% Tax): $21.60
When the cart contains multiple items, here is what that should look like:

--Cart--
Item Count: 2
Items: 
V-Neck: $20.00
Polo: $25.50

Pre-Tax Total: $45.50
Post-Tax Total (10.00% Tax): $49.14

Take careful note of the formatting. You’ll want to use String.format to produce the output above.

If the cart is empty and shopper selects option 4, print the following message:

The cart is empty. Please add at least one product to see it in the cart.
You also need to implement two additional pieces of functionality for the Cart: emptying it and checking out. Each of those methods are shown in the diagram.

Finally, you’ll need to add some functionality to allow the shopper to check out. Checkout should occur when the shopper selects option 5 in the menu. Checking out should empty the cart using a private empty method that you need to define on the Cart class to clear the items ArrayList in the Cart. Finally, to confirm checkout, the following should be printed by the application:

Your total is $95.25
Thank you for shopping at T-Shirt Mart.
The total should use the String.format method to display the value.

When the cart is empty, the following message should be displayed if the shopper attempts to check out:

Your cart is currently empty. Please add at least one product to check out.

